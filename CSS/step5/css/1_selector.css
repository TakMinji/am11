
.tagSelector h1{color:#0c0; font-size:20px;}
.tagSelector p{color:#0cf; font-size:15px;}
.tagSelector span{color:#336; font-size:13px;}

/*태그선택자 사용법*/

.idSelector p#paragraph1{font-size:16px; text-decoration:underline;}
.idSelector p#paragraph2{color:#09F; text-decoration:line-through;}
.idSelector p#paragraph3{font-weight:bold; text-decoration:overline;}

/*ID선택자 사용법*/

.classSelector p.f_size{font-size:20px;}
.classSelector p.f_weight{font-weight:bold;}
.classSelector p.f_color{color:#9cf;}

/*CLASS 선택자 사용법 + 다중 클래스 지정 */

.attrSelector fieldset{
    border: 1px solid #555; background-color: slateblue;
    border-radius: 30px 0 30px;
}
.attrSelector fieldset legend{
    border: 1px solid slateblue; background-color: #555; color: white;
    padding: 10px; border-radius: 10px 0 10px;
}
.attrSelector fieldset ul{
    margin: 0; padding: 0; list-style: none;
}
.attrSelector fieldset ul li{
    font-size: 14px; color: white; line-height: 30px;
}
.attrSelector fieldset ul li label:not([for$='Ex']){
    width: 100px; display: inline-block;
}
/* 
▲ label중에 for값이 끝이 Ex로 끝나는 애들을 뺀 나머지를 의미함 
▲ not은 부정문
$ >> 뒤를 의미함, 해석하면 뒤에 텍스트가 EX로 끝나는애들 
*/
.attrSelector fieldset ul li input[type="text"]{
    background-color: salmon; border: 3px solid lightpink; color: maroon;
}
/* 
▲ [type=""] 지정 선택자 
"", '' 홑.쌍따음표 둘다 가능함
"" - 쌍따음표는 홑따음표를 품을 수 있어서 문자를 여러개 쓸 때 
     >>>>  ex) "'text''submit'" 
'' - 홑따음표는 한개만 지정해서 쓸 수 있음 
*/
.attrSelector fieldset ul li input[type="password"]{
    background-color: lightgreen; border: 3px solid lime; color: forestgreen;
}
.attrSelector fieldset ul li input input[type='radio']{
    background-color: black; border: 5px solid yellow;
}
.attrSelector fieldset ul li input input[type='checkbox']{
    background-color: black; color: 5px solid yellowgreen;
}
.directSelector > h1{
    font-size: 22px; color: #66f;
}
/* directSeletor class의 직계 h1 */
.directSelector > span{
    font-size: 18px; color: #906;
}
/* 
span을 여러번 쓴 잘못된 구조로 인해 직계는 정상적으로 작동했지만 다 바뀌어버림 
실무에서는 버블링, 버블이펙트 현상이라고 함.
*/
.sameSelector h1~h2{
    background-color: #333;
}
/*
▲ 동위선택자 : 동일한 구조에 있는 애들 선택하는 것 
*/
/* 
같은 공간 내에서 h1을 기준으로 이하에 있는 모든 애들 선택하는 것 
*/
.sameSelector h1+h2{
    font-size: 40px; color: #fcf;
}
/* 
h1 바로 뒤에있는 h2 선택하는 것, ~보다 +를 자주씀 
*/
.stringAttrSelector img[src$='png']{
    width: 100px; border: 3px solid red;
}
.stringAttrSelector img[src$='jpg']{
    width: 200px; border: 5px solid green;
}
.stringAttrSelector img[src$='gif']{
    width: 300px; border: 10px solid blue;
}
/* $ >> 맨 뒤를 의미함 */
.stringAttrSelector h1[title*='제목']{
    color: red;
}
/* 중앙 */
.stringAttrSelector h1[title^="남자"]{
    color: blue;
}
/* ^ >> 맨 앞을 의미함, 캐럿 */
.stringAttrSelector h1[title|="탈의실"]{
    color: deeppink;
}
/* shift + 원화표시 키 */

.stringAttrSelector img[src$='gif']{
    width: 300px; border: 10px solid blue;
}
.stringAttrSelector h1[title*='제목']{
    color: red;
}
.stringAttrSelector h1[title^="남자"]{
    color: blue;
}
.stringAttrSelector h1[title|="탈의실"]{
    color: deeppink;
}
.eventSelector{
    margin-bottom: 50px;
}
.eventSelector a{
    display: block; margin-bottom: 20px;
}
.eventSelector a:link{ /* ? 대상:link가 걸린 상태 = href attr을 지닌 상태. */
    color: red; background-color: black; text-decoration: none;
}
.eventSelector a:hover{ /* ? 대상: mouse cursor가 올라간 상태. */
    color: black; background-color: red; text-decoration: underline;
}
.eventSelector a:active{ /* ? 대상:click이 일어났을때*/
    color: red; background-color: white; text-decoration: line-through;
}
.eventSelector a:visited{ /* ? 대상:을 방문한 적이 있는 상태 / 배경은 cursor를 올렸을 때 / 기존 선행속성들 영향을 받음*/
    color: gray; background-color: white;
    /* border: 1px solid gray; */
}
.eventSelector a:focus{ /* 대상: 에 초점이 맞춰진 상태 */
    border: 5px solid deeppink;
}
/* focus 쓸 때 웹접근성 고대비 홈페이지 추천 */
.statusSelector input[type='checkbox'] + label{
    line-height: 20px; display: inline-block; transition: all .75s ease-out;
}
/* overflow는 감추기만 할 뿐 공간은 존재함 */
.statusSelector input[type='checkbox']:checked + label{
    line-height: 0px; 
    font-size: 0;
}
/* 
input이 check가 된 상황 선택자 >> :checked 
label이 check되면 사라지게 만드는 상황임 
select Tag는 -> :selected 사용하면 됨
*/
.statusSelector input:enabled::placeholder{
    /* input default -disabled -> enabled로 변경되었을 때 상황 */
    background-color: black; color: white;
}
.statusSelector input:disabled{
    /* 
    ! readonly <=> disabled : 혼동해서 사용하면 안됨.
    1. readonly : 읽기전용. server에서 값을 전달받은 상태에서 수정이 불가능한 상황.
        ex. 회원정보에서 ID
    2. disabled : 비활성화. server에 값을 전달한 적이 없는 불가능한 상태.
        ex. 결제수단 선택할건데 무통장입금, 신용카드, 휴대폰 결제 ...
            이 중 하나 선택하면 나머지는 중복없이 선택 못하게 해야하는 상황
    */
    background-color: lightgray; color: darkgrey;
}
.virtualSelector ul{
    list-style: none; margin: 30px 0; padding: 0; overflow: hidden; 
    background-color: lightgoldenrodyellow;
}
.virtualSelector ul li{
    width: 14.28%; box-sizing: border-box; padding: 15px; float: left;
}

/* <가상 선택자> */
.virtualSelector ul li:first-child{
    border-radius: 30px 0 0 30px;
}
/* ul에서 첫번째 자손 호출 */
.virtualSelector ul li:last-child{
    border-radius: 0 30px 30px 0;
}
/* ul에서 마지막 자손 호출 */
/*
child : 부모 기준으로 바라보는 순서 
위에서 li가 중요한게 아닌 ul이 중요
*/
.virtualSelector ul li:nth-child(2n+1){
    /* 
    ! css에서 2n+1 >> odd / 2n >> even 이렇게 선택해서 쓰기도함 
    다만 css에서 0을 배제시켜서 odd와 even이 바뀌면서 짝,홀이 바껴버림
    우리가 쓰는 방법이 js에서 쓰기 좋아서 절대 저렇게 안씀.
    */
    background-color: #444; color: #fff;
}

.virtualSelector ul li:nth-child(2n){
    background-color: #09f;
}
/* nth : n번째,n이 숫자가 되어주는 것 */
/* sementic태그 Fin */

/* <of-type - 위 nth-child와 다르게 자손들끼리 집는 것> 
>> 쓰는 경우
안에 구조가 단순하고 반복되는 구조에서는 of-type을 쓸 일이 없음 child가 유리함 
그러나 우리가 일반적으로 잡는 구조라고 했을 때 child가 불리히고 of-type쓰는게 훨씬 편함*/
.shapeSelector h1:nth-child(6){
    color: #f06;
}
.shapeSelector h2:nth-child(2){
    color: #0c6;
}
.shapeSelector h3:last-child{
    color: #30f;
}
/* todo. 위 문법을 child로 바꾸서 같은 결과가 나오게 만들기 */
/* 부모기준으로 바라보는 것, h1 태그가 없어도 짚을 순 있음 */
.textSelector h1::first-letter{
    font-size: 100px; color: #09f;
}
/* 
::first-letter >> 앞 글자만 선택하는 선택자 
*비중요
*/
.textSelector p::first-line{
    font-size: 38px; line-height: 30px; color: #090; text-decoration: underline;
}
/* 
::first-line >> 첫 줄 선택자
줄바꿈되는 애들은 css에서 배제됨
last는 없음 
*비중요
*/

.backandfrontSelector p{
    counter-increment: rint;
}
/* 
counter-increment: ; 
몇개인지 세라고 명령하는 것 - 안에는 알아들을 수 있는걸로 내 마음대로 넣으면됨(ex.rint)*/
.backandfrontSelector p::before{
    content: counter(rint) ".";
}
/* 
content는 없는 곳에 무언가 강제로 넣기위해 쓰는 태그임 
숫자를 세는 태그 counter();
괄호안에는 세워야하는 대상을 넣어주면 됨
앞공간에다 숫자를 세는 걸 강제로 끼워넣은 것
*/
.backandfrontSelector p::after{
    content: "-" attr(data-page) "page"; font-weight: bold;
    color: deeppink;
}
/* before 위(전위), after 아래(후위) */

.reactionSelector > *{
    color: #fff;
}
.reactionSelector > *::selection{
    background-color: #000; color: #ff0;
}
/* selection 
환경 고대비율이 깨지기 때문에 특정 취약자들이 웹을 사용하기에 불편해서 웬만하면 사용X*/



/*
<Tip> 
html,css,js mdn사이트 즐겨찾기 해놓고 뭐가 나타나고 변경되는지 자주 체크하기 

<git 강제푸쉬>
git push -u origin main --force 
*/